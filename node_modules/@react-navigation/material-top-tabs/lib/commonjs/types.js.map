{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type {\n  Descriptor,\n  NavigationHelpers,\n  NavigationProp,\n  ParamListBase,\n  Route,\n  RouteProp,\n  TabActionHelpers,\n  TabNavigationState,\n} from '@react-navigation/native';\nimport type React from 'react';\nimport type { StyleProp, TextStyle, ViewStyle } from 'react-native';\nimport type {\n  SceneRendererProps,\n  TabBar,\n  TabViewProps,\n} from 'react-native-tab-view';\n\nexport type MaterialTopTabNavigationEventMap = {\n  /**\n   * Event which fires on tapping on the tab in the tab bar.\n   */\n  tabPress: { data: undefined; canPreventDefault: true };\n  /**\n   * Event which fires on long press on the tab in the tab bar.\n   */\n  tabLongPress: { data: undefined };\n  /**\n   * Event which fires when a swipe gesture starts, i.e. finger touches the screen.\n   */\n  swipeStart: { data: undefined };\n  /**\n   * Event which fires when a swipe gesture ends, i.e. finger leaves the screen.\n   */\n  swipeEnd: { data: undefined };\n};\n\nexport type MaterialTopTabNavigationHelpers = NavigationHelpers<\n  ParamListBase,\n  MaterialTopTabNavigationEventMap\n> &\n  TabActionHelpers<ParamListBase>;\n\nexport type MaterialTopTabNavigationProp<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = NavigationProp<\n  ParamList,\n  RouteName,\n  NavigatorID,\n  TabNavigationState<ParamList>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap\n> &\n  TabActionHelpers<ParamList>;\n\nexport type MaterialTopTabScreenProps<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = {\n  navigation: MaterialTopTabNavigationProp<ParamList, RouteName, NavigatorID>;\n  route: RouteProp<ParamList, RouteName>;\n};\n\nexport type MaterialTopTabNavigationOptions = {\n  /**\n   * Title text for the screen.\n   */\n  title?: string;\n\n  /**\n   * Title string of a tab displayed in the tab bar\n   * or a function that given { focused: boolean, color: string } returns a React.Node, to display in tab bar.\n   *\n   * When undefined, scene title is used. Use `tabBarShowLabel` to hide the label.\n   */\n  tabBarLabel?:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        children: string;\n      }) => React.ReactNode);\n\n  /**\n   * Accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * It's recommended to set this if you don't have a label for the tab.\n   */\n  tabBarAccessibilityLabel?: string;\n\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  tabBarAllowFontScaling?: boolean;\n\n  /**\n   * Whether the tab label should be visible. Defaults to `true`.\n   */\n  tabBarShowLabel?: boolean;\n\n  /**\n   * A function that given { focused: boolean, color: string } returns a React.Node to display in the tab bar.\n   */\n  tabBarIcon?: (props: { focused: boolean; color: string }) => React.ReactNode;\n\n  /**\n   * Whether the tab icon should be visible. Defaults to `false`.\n   */\n  tabBarShowIcon?: boolean;\n\n  /**\n   * Function that returns a React element to use as a badge for the tab.\n   */\n  tabBarBadge?: () => React.ReactNode;\n\n  /**\n   * Function that returns a React element as the tab bar indicator.\n   */\n  tabBarIndicator?: (\n    props: Omit<\n      Parameters<\n        NonNullable<React.ComponentProps<typeof TabBar>['renderIndicator']>\n      >[0],\n      'navigationState'\n    > & { state: TabNavigationState<ParamListBase> }\n  ) => React.ReactNode;\n\n  /**\n   * Style object for the tab bar indicator.\n   */\n  tabBarIndicatorStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the view containing the tab bar indicator.\n   */\n  tabBarIndicatorContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * ID to locate this tab button in tests.\n   */\n  tabBarTestID?: string;\n\n  /**\n   * Color for the icon and label in the active tab.\n   */\n  tabBarActiveTintColor?: string;\n\n  /**\n   * Color for the icon and label in the inactive tabs.\n   */\n  tabBarInactiveTintColor?: string;\n\n  /**\n   * Color for material ripple (Android >= 5.0 only).\n   */\n  tabBarPressColor?: string;\n\n  /**\n   * Opacity for pressed tab (iOS and Android < 5.0 only).\n   */\n  tabBarPressOpacity?: number;\n\n  /**\n   * Boolean indicating whether the tab bar bounces when overscrolling.\n   */\n  tabBarBounces?: boolean;\n\n  /**\n   * Boolean indicating whether to make the tab bar scrollable.\n   *\n   * If you set this to `true`, you should also specify a width in `tabBarItemStyle` to improve the performance of initial render.\n   */\n  tabBarScrollEnabled?: boolean;\n\n  /**\n   * Style object for the tab icon container.\n   */\n  tabBarIconStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the tab label.\n   */\n  tabBarLabelStyle?: StyleProp<TextStyle>;\n\n  /**\n   * Style object for the individual tab items.\n   */\n  tabBarItemStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the view containing the tab items.\n   */\n  tabBarContentContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the the tab bar.\n   */\n  tabBarStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Gap between tabs\n   */\n  tabBarGap?: number;\n\n  /**\n   * Whether to enable swipe gestures when this screen is focused.\n   * Swipe gestures are enabled by default. Passing `false` will disable swipe gestures,\n   * but the user can still switch tabs by pressing the tab bar.\n   */\n  swipeEnabled?: boolean;\n\n  /**\n   * Whether to enable animations when switching between tabs by pressing on the tab bar or programmatically.\n   * Switching tab via swipe gesture will still result in an animation.\n   */\n  animationEnabled?: boolean;\n\n  /**\n   * Whether this screen should be lazily rendered. When this is set to `true`,\n   * the screen will be rendered as it comes into the viewport.\n   * By default all screens are rendered to provide a smoother swipe experience.\n   * But you might want to defer the rendering of screens out of the viewport until the user sees them.\n   * To enable lazy rendering for this screen, set `lazy` to `true`.\n   *\n   * When you enable `lazy`, the lazy loaded screens will usually take some time to render\n   * when they come into the viewport. You can use the `lazyPlaceholder` prop to customize\n   * what the user sees during this short period.\n   */\n  lazy?: boolean;\n\n  /**\n   * When `lazy` is enabled, you can specify how many adjacent screens should be preloaded in advance with this prop.\n   * This value defaults to `0` which means lazy pages are loaded as they come into the viewport.\n   */\n  lazyPreloadDistance?: number;\n\n  /**\n   * Function that returns a React element to render if this screen hasn't been rendered yet.\n   * The `lazy` option also needs to be enabled for this to work.\n   *\n   * This view is usually only shown for a split second. Keep it lightweight.\n   *\n   * By default, this renders `null`.\n   */\n  lazyPlaceholder?: () => React.ReactNode;\n};\n\nexport type MaterialTopTabDescriptor = Descriptor<\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationProp<ParamListBase>,\n  RouteProp<ParamListBase>\n>;\n\nexport type MaterialTopTabDescriptorMap = Record<\n  string,\n  MaterialTopTabDescriptor\n>;\n\nexport type MaterialTopTabNavigationConfig = Omit<\n  TabViewProps<Route<string>>,\n  | 'navigationState'\n  | 'onIndexChange'\n  | 'onSwipeStart'\n  | 'onSwipeEnd'\n  | 'renderScene'\n  | 'renderTabBar'\n  | 'renderLazyPlaceholder'\n  | 'swipeEnabled'\n  | 'animationEnabled'\n  | 'lazy'\n  | 'lazyPreloadDistance'\n  | 'lazyPlaceholder'\n> & {\n  /**\n   * Function that returns a React element to display as the tab bar.\n   */\n  tabBar?: (props: MaterialTopTabBarProps) => React.ReactNode;\n};\n\nexport type MaterialTopTabBarProps = SceneRendererProps & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: NavigationHelpers<\n    ParamListBase,\n    MaterialTopTabNavigationEventMap\n  >;\n  descriptors: MaterialTopTabDescriptorMap;\n};\n"],"mappings":""}